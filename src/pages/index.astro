---
import Layout from "layouts/Layout.astro";
import Box from "components/Box.astro";
import Chip from "components/Chip.astro";
import SlideShowAvatar from "components/SlideShowAvatar.astro";
import {
  faKeyboard,
  faCodeMerge,
  faScroll,
  faObjectGroup,
  faBookOpenReader,
  faDumbbell,
} from "@fortawesome/free-solid-svg-icons";
import Icon from "components/Icon.astro";
import {
  faGithub,
  faThreads,
  faMastodon,
  faLinkedin,
  faXTwitter,
} from "@fortawesome/free-brands-svg-icons";
import disc from "components/disc";
import * as styles from "./index.css";
import { getCollection } from "astro:content";
import ProjectCard from "components/ProjectCard.astro";
import { css } from "styled-system/css";
import { defineKeyframes } from "@pandacss/dev";

let posts = (await getCollection("blog"))
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf())
  .filter(({ data: { draft } }) => !draft)
  .slice(0, 3);

if (import.meta.env.MODE === "production") {
  posts = posts.filter((post) => !post.data.draft);
}

defineKeyframes({
  moveBg: {
    to: {
      backgroundPosition: "var(--bg-size) 0",
    },
  },
});
---

<Layout>
  <Box class={styles.lights} />
  <Box class={styles.lights2} />
  <div class={styles.grid}>
    <Box
      gridArea="bio"
      as="p"
      textAlign={{ _: "center", md: "left" }}
      style={{ textWrap: "balanced" }}
      typeScale={{ sm: "$2xl" }}
    >
      <strong
        class={css({
          "--bg-size": "200%",
          bg: "var(--grad) text 0 0 / var(--bg-size) 100%",
          WebkitTextFillColor: "transparent",
          _motionSafe: {
            animation: "moveBg 4s ease-in-out infinite",
          },
        })}>Hey, I'm Rogin!</strong
      > I'm a software engineer based in sunny San Diego, CA. I'm passionate about
      design systems, developer tooling, and web accessibility. I enjoy playing ultimate
      frisbee, weight-lifting, and building mechanical keyboards in my free time.
    </Box>
    <Box
      gridArea="pic"
      display="flex"
      alignItems="center"
      justifyContent={{ _: "center", md: "flex-end" }}
    >
      <SlideShowAvatar />
    </Box>
    <Box
      gridArea="chips"
      display="flex"
      gap="$3"
      flexWrap="wrap"
      mb="$7"
      fontSize="$lg"
    >
      <Chip icon={faKeyboard} iconColor="$blue9">
        Mechanical Keyboard Enthusiast
      </Chip>
      <Chip icon={faBookOpenReader} iconColor="$green9">Self Taught</Chip>
      <Chip icon={faCodeMerge} iconColor="$orange9">Open Sourcerer</Chip>
      <Chip icon={faObjectGroup} iconColor="$purple9">Design Systems</Chip>
      <Chip icon={disc} iconColor="$blue10">Ultimate Frisbee</Chip>
      <Chip icon={faDumbbell} iconColor="$gray9">Weight-lifter</Chip>
      <Chip icon={faScroll} iconColor="$red9">History Nerd</Chip>
    </Box>
  </div>
  <Box as="section" mb="$8">
    <Box
      as="h2"
      typeScale={{ _: "$3xl", sm: "$4xl" }}
      fontWeight="$bolder"
      mb="$6"
    >
      Featured Projects
    </Box>
    <Box display="flex" gap="$4" flexDirection={{ _: "column", sm: "row" }}>
      <ProjectCard
        href="https://github.com/roginfarrer/react-collapsed"
        title="react-collapsed"
        emoji="🙈"
        desc="React custom hook for creating animated and accessible expand/collapse components"
        repo="roginfarrer/react-collapsed"
      />
      <ProjectCard
        href="https://github.com/wayfair/rainbow-sprinkles"
        title="Rainbow Sprinkles"
        emoji="🌈 🧁"
        desc="Dynamic, theme-driven style props for Vanilla Extract."
        repo="wayfair/rainbow-sprinkles"
      />
      <ProjectCard
        href="https://github.com/system-props/system-props"
        title="System Props"
        emoji="📦"
        desc="Responsive, theme-based, and typed style props for React."
        repo="system-props/system-props"
      />
    </Box>
  </Box>
  {
    /* <Stack gap="$6" mb="$9">
    <Box as="h2" typeScale="$4xl" fontWeight="$bolder">Recent Posts</Box>
    {
      posts.map((post) => (
        <Box
          as="a"
          href={`blog/${post.slug}`}
          p="$4"
          borderRadius="$lg"
          border={`2px solid ${vars.colors.gray8}`}
          bg="$gray4"
          display="flex"
          justifyContent="space-between"
          alignItems="center"
        >
          <div>
            <Box as="h3" typeScale="$2xl">
              {post.data.title}
            </Box>
            <FormattedDate date={post.data.date} />
          </div>
          <Icon icon={faArrowRightLong} size="1.25em" />
        </Box>
      ))
    }
  </Stack> */
  }
  <Box display="flex" justifyContent="space-evenly">
    <Box as="a" href="https://github.com/roginfarrer" class={styles.socialIcon}>
      <Icon icon={faGithub} size="2em" title="GitHub" />
    </Box>
    <Box
      as="a"
      href="https://www.linkedin.com/in/roginfarrer/"
      class={styles.socialIcon}
    >
      <Icon icon={faLinkedin} size="2em" title="LinkedIn" />
    </Box>
    <Box
      as="a"
      href="https://www.threads.net/@roginfarrer"
      class={styles.socialIcon}
    >
      <Icon icon={faThreads} size="2em" title="Threads" />
    </Box>
    <Box as="a" href="https://hachyderm.io/@rogin" class={styles.socialIcon}>
      <Icon icon={faMastodon} size="2em" title="Mastodon" />
    </Box>
    <Box as="a" href="https://x.com/roginfarrer" class={styles.socialIcon}>
      <Icon icon={faXTwitter} size="2em" title="Mastodon" />
    </Box>
  </Box>
</Layout>

<script>
  // Update the chip icon colors with random colors
  import { vars } from "../vars.css";
  const iconColors: (keyof typeof vars.colors)[] = [
    "green9",
    "blue10",
    "red9",
    "orange9",
    "purple9",
  ];

  function randomInRange(min: number, max: number) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  function setup() {
    const icons = document.querySelectorAll(
      `[data-chip-icon]`,
    ) as NodeListOf<HTMLElement>;

    icons.forEach((node) => {
      let timeoutId: NodeJS.Timeout;
      function run() {
        let timeout = randomInRange(3000, 6000);
        timeoutId = setTimeout(() => {
          const random = randomInRange(0, iconColors.length - 1);
          node.style.setProperty("color", vars.colors[iconColors[random]]);
          clearTimeout(timeoutId);
          run();
        }, timeout);
      }
      run();
    });
  }

  setup();

  document.addEventListener("astro:after-swap", setup);
</script>

<script>
  import { cachedFetch } from "../cache";

  function setup(doc = document) {
    const cards = doc.querySelectorAll(
      "[data-project-card-repo]",
    ) as NodeListOf<HTMLElement>;

    cards.forEach(async (card) => {
      const repo = card.dataset.projectCardRepo;
      if (!repo) {
        return;
      }
      const [owner, project] = repo.split("/");
      const data = await cachedFetch<{ stargazers_count: number }>(
        `https://api.github.com/repos/${owner}/${project}`,
        // 6 hours
        { duration: 21600000 },
      );
      if (data.stargazers_count) {
        const starEl = card.querySelector(".project-card-stars");
        if (starEl) {
          starEl.innerHTML = data.stargazers_count.toString();
        }
      }
    });
  }

  setup();

  document.addEventListener("astro:before-swap", (e) => {
    // @ts-expect-error
    setup(e.newDocument);
  });
</script>
