---
import Layout from "layouts/Layout.astro";
import Chip from "components/Chip.astro";
import SlideShowAvatar from "components/SlideShowAvatar.astro";
import {
  faKeyboard,
  faCodeMerge,
  faScroll,
  faObjectGroup,
  faBookOpenReader,
  faDumbbell,
} from "@fortawesome/free-solid-svg-icons";
import {
  faGithub,
  faThreads,
  faMastodon,
  faLinkedin,
  faXTwitter,
} from "@fortawesome/free-brands-svg-icons";
import disc from "components/disc";
import ProjectCard from "components/ProjectCard.astro";
import { css } from "styled-system/css";
import { flex, grid } from "styled-system/patterns";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";

const pageGrid = grid({
  gridTemplateAreas: '"pic pic" "bio bio" "chips chips"',
  gap: "6",
  alignItems: "center",
  marginBottom: "3",
  "@md": {
    gridTemplateColumns: "1fr 1fr",
    gridTemplateRows: "1fr 1fr 1fr",
    gridTemplateAreas: '"bio pic" "bio pic" "chips chips"',
    gap: "token(spacing.9) token(spacing.7)",
  },
  "@lg": {
    gridTemplateColumns: "2fr 1fr",
  },
});

const lights = css({
  background:
    "radial-gradient(circle at 15% 50%, token(colors.accent3), rgba(255, 255, 255, 0) 25%)",
  position: "fixed",
  zIndex: "-1",
  inset: 0,
  _motionSafe: {
    animation: "light1 15s ease-in-out infinite alternate",
  },
});
const lights2 = css({
  background:
    "radial-gradient(circle at 50% 50%, token(colors.accent5), rgba(255, 255, 255, 0) 25%)",
  position: "fixed",
  zIndex: "-1",
  inset: 0,
  _motionSafe: { animation: "light2 15s linear infinite alternate" },
  ".dark &": {
    background:
      "radial-gradient(circle at 50% 50%, token(colors.accent3), rgba(255, 255, 255, 0) 25%)",
  },
});
---

<Layout>
  <div class={lights}></div>
  <div class={lights2}></div>
  <div class={pageGrid}>
    <p
      class={css({
        gridArea: "bio",
        textAlign: { base: "center", md: "left" },
        textStyle: { "@sm": "2xl" },
        textWrap: "pretty",
      })}
    >
      <strong
        class={css({
          "--bg-size": "200%",
          bg: "var(--grad) text 0 0 / var(--bg-size) 100%",
          WebkitTextFillColor: "transparent",
          _motionSafe: {
            animation: "moveBg 4s ease-in-out infinite",
          },
        })}>Hey, I'm Rogin!</strong
      > I'm a software engineer based in sunny San Diego, CA. I'm passionate about
      design systems, developer tooling, and web accessibility. I enjoy playing ultimate
      frisbee, weight-lifting, and building mechanical keyboards in my free time.
    </p>
    <div
      class={flex({
        gridArea: "pic",
        align: "center",
        justify: { base: "center", md: "flex-end" },
      })}
    >
      <SlideShowAvatar />
    </div>
    <div
      class={flex({
        gridArea: "chips",
        gap: "3",
        flexWrap: "wrap",
        mb: "7",
        fontSize: "lg",
      })}
    >
      <Chip icon={faKeyboard} iconColor="blue9">
        Mechanical Keyboard Enthusiast
      </Chip>
      <Chip icon={faBookOpenReader} iconColor="green9">Self Taught</Chip>
      <Chip icon={faCodeMerge} iconColor="orange9">Open Sourcerer</Chip>
      <Chip icon={faObjectGroup} iconColor="purple9">Design Systems</Chip>
      <Chip icon={disc} iconColor="blue10">Ultimate Frisbee</Chip>
      <Chip icon={faDumbbell} iconColor="gray9">Weight-lifter</Chip>
      <Chip icon={faScroll} iconColor="red9">History Nerd</Chip>
    </div>
  </div>
  <div class={css({ mb: "8" })}>
    <h2
      class={css({
        textStyle: { base: "3xl", "@sm": "4xl" },
        fontWeight: "bolder",
        mb: "6",
      })}
    >
      Featured Projects
    </h2>
    <div class={flex({ gap: "4", direction: { base: "column", sm: "row" } })}>
      <ProjectCard
        href="https://github.com/roginfarrer/react-collapsed"
        title="react-collapsed"
        emoji="🙈"
        desc="React custom hook for creating animated and accessible expand/collapse components"
        repo="roginfarrer/react-collapsed"
      />
      <ProjectCard
        href="https://github.com/wayfair/rainbow-sprinkles"
        title="Rainbow Sprinkles"
        emoji="🌈 🧁"
        desc="Dynamic, theme-driven style props for Vanilla Extract."
        repo="wayfair/rainbow-sprinkles"
      />
      <ProjectCard
        href="https://github.com/system-props/system-props"
        title="System Props"
        emoji="📦"
        desc="Responsive, theme-based, and typed style props for React."
        repo="system-props/system-props"
      />
    </div>
  </div>
  <div class={flex({ justify: "space-evenly" })}>
    {
      [
        {
          title: "GitHub",
          icon: faGithub,
          href: "https://github.com/roginfarrer",
        },
        {
          title: "LinkedIn",
          icon: faLinkedin,
          href: "https://linkedin.com/in/roginfarrer",
        },
        {
          title: "Threads",
          icon: faThreads,
          href: "https://www.threads.net/@roginfarrer",
        },
        {
          title: "Mastodon",
          icon: faMastodon,
          href: "https://hachyderm.io/@rogin",
        },
        {
          title: "Twitter",
          icon: faXTwitter,
          href: "https://x.com/roginfarrer",
        },
      ].map(({ title, icon, href }) => (
        <a
          href={href}
          class={css({
            p: "2",
            transitionProperty: "color, transform",
            transitionDuration: ".2s",
            transitionTimingFunction: "ease",
            _hover: {
              color: "accent10",
              transform: "translateY(-10%) scale(1.05)",
            },
          })}
        >
          <FontAwesomeIcon
            icon={icon}
            className={css({ size: "2em" })}
            title={title}
          />
        </a>
      ))
    }
  </div>
</Layout>

<script>
  // Update the chip icon colors with random colors
  import { token } from "styled-system/tokens";
  const iconColors = ["green9", "blue10", "red9", "orange9", "purple9"];

  function randomInRange(min: number, max: number) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  function setup() {
    const icons = document.querySelectorAll(
      `[data-chip-icon]`,
    ) as NodeListOf<HTMLElement>;

    icons.forEach((node) => {
      let timeoutId: NodeJS.Timeout;
      function run() {
        let timeout = randomInRange(3000, 6000);
        timeoutId = setTimeout(() => {
          const random = randomInRange(0, iconColors.length - 1);
          node.style.setProperty(
            "color",
            token(`colors.${iconColors[random]}`),
          );
          clearTimeout(timeoutId);
          run();
        }, timeout);
      }
      run();
    });
  }

  setup();

  document.addEventListener("astro:after-swap", setup);
</script>

<script>
  import { cachedFetch } from "../cache";

  function setup(doc = document) {
    const cards = doc.querySelectorAll(
      "[data-project-card-repo]",
    ) as NodeListOf<HTMLElement>;

    cards.forEach(async (card) => {
      const repo = card.dataset.projectCardRepo;
      if (!repo) {
        return;
      }
      const [owner, project] = repo.split("/");
      const data = await cachedFetch<{ stargazers_count: number }>(
        `https://api.github.com/repos/${owner}/${project}`,
        // 6 hours
        { duration: 21600000 },
      );
      if (data.stargazers_count) {
        const starEl = card.querySelector(".project-card-stars");
        if (starEl) {
          starEl.innerHTML = data.stargazers_count.toString();
        }
      }
    });
  }

  setup();

  document.addEventListener("astro:before-swap", (e) => {
    // @ts-expect-error
    setup(e.newDocument);
  });
</script>
