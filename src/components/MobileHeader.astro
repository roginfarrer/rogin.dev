---
import Box from "./Box.astro";
import * as styles from "./MobileHeader.css";
import { vars } from "../vars.css";
import {
  faChevronDown,
  faEllipsisH,
  type IconDefinition,
} from "@fortawesome/free-solid-svg-icons";
import Icon from "./Icon.astro";
import ThemeToggle from "./ThemeToggle.astro";

interface Props {
  links: { title: string; url: string; icon: IconDefinition }[];
}

const { links } = Astro.props;

const buttonStyles = {
  bg: { _: "$accent9", darkMode: "$accent8" },
  color: "white",
  textAlign: "center",
  fontSize: "$xl",
  height: "44px",
  width: "100vw",
} as const;
---

<Box position="fixed" top="$4" right="$5" display={{ sm: "none" }} zIndex="10">
  <ThemeToggle />
</Box>
<Box
  as="button"
  borderRadius={"50px 50px 0 0" /* `${vars.radii.xl} ${vars.radii.xl} 0 0` */}
  position="fixed"
  bottom="env(safe-area-inset-bottom)"
  id="mobile-nav-btn"
  display={{ sm: "none" }}
  zIndex="10"
  boxShadow={{
    _: `0 -4px 12px ${vars.colors.gray8}`,
    darkMode: `0 -2px 10px ${vars.colors.gray6}`,
  }}
  style={{ "overscroll-behavior": "none" }}
  {...buttonStyles}
>
  <Icon title="Open menu" icon={faEllipsisH} position="relative" top="2px" />
</Box>
<Box class={styles.dialog} as="dialog" id="mobile-nav">
  <Box
    display="block"
    as="button"
    id="mobile-nav-close"
    autofocus
    {...buttonStyles}
  >
    <Icon
      icon={faChevronDown}
      animation={`${styles.floatingChevron} 0.75s linear infinite alternate`}
      title="Close menu"
    />
  </Box>
  <Box
    as="nav"
    display="flex"
    bg="$gray1"
    color="$gray12"
    alignItems="center"
    height="clamp(100px, 25vw, 125px)"
    gap="$4"
    p="$4"
  >
    {
      links.map(({ url, title, icon }) => (
        <Box
          flex="25%"
          maxWidth="25%"
          bg={{ _: "$gray4", hover: "$accent4" }}
          border="2px solid"
          borderColor={{ _: "$gray5", hover: "$accent5" }}
          borderRadius="$lg"
          as="a"
          href={url}
          display="flex"
          placeItems="center"
          height="100%"
          gap={{ _: "$1", xs: "$2" }}
          px="$2"
          flexDirection={{ _: "column", xs: "row" }}
          fontSize={{ _: "$sm", xs: "$base" }}
        >
          {title === "/uses" ? (
            <Box as="span" fontStyle="italic" fontWeight="$bold">
              {"/uses"}
            </Box>
          ) : (
            <Icon icon={icon} size={{ _: "1.5em", xs: "1.25em" }} />
          )}
          {title !== "/uses" && <Box as="span">{title}</Box>}
        </Box>
      ))
    }
  </Box>
</Box>

<script>
  import * as styles from "./MobileHeader.css";

  function setup() {
    let transitionState = "idle";

    const showButton = document.querySelector("#mobile-nav-btn");
    const closeButton = document.querySelector("#mobile-nav-close");
    const dialog = document.querySelector("#mobile-nav") as HTMLDialogElement;

    function clickOutside(e: MouseEvent | TouchEvent) {
      if (!(e.target instanceof Node)) {
        return;
      }
      if (e.target === dialog || dialog.contains(e.target)) {
        return;
      }
      close();
    }

    function show() {
      if (transitionState !== "idle") return;
      transitionState = "opening";
      dialog.showModal();
      document.querySelector("body")!.style.setProperty("overflow", "hidden");
      document.addEventListener("mousedown", clickOutside, { once: true });
      document.addEventListener("touchstart", clickOutside, { once: true });
    }

    function close() {
      if (transitionState === "closing" || transitionState === "idle") return;
      transitionState = "closing";
      dialog.setAttribute("data-closing", "");
      document.removeEventListener("mousedown", clickOutside);
      document.removeEventListener("touchstart", clickOutside);
    }

    function handleAnimationEnd(e: AnimationEvent) {
      if (e.animationName === styles.slideIn) {
        transitionState = "open";
        return;
      }
      if (e.animationName !== styles.slideOut) {
        return;
      }
      dialog.removeAttribute("data-closing");
      dialog.close();
      document.querySelector("body")!.style.removeProperty("overflow");
      transitionState = "idle";
    }

    dialog.addEventListener("keydown", (e) => {
      if (e.key === "Escape") {
        e.preventDefault();
        close();
      }
    });

    dialog.addEventListener("animationend", handleAnimationEnd);
    showButton?.addEventListener("click", show);
    showButton?.addEventListener("touchmove", show);
    closeButton?.addEventListener("click", close);
    dialog.addEventListener("touchmove", close);
  }

  document.addEventListener("astro:page-load", setup);
</script>
