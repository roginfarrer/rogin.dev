---
import type { IconDefinition } from "@fortawesome/free-solid-svg-icons";
import * as styles from "./StickyMobileHeader.css";
import {
  HouseFilledIcon,
  HouseOutlineIcon,
  BriefcaseFilledIcon,
  BriefcaseOutlineIcon,
  GearOutlineIcon,
  GearFilledIcon,
  RSSOutlineIcon,
  RSSFilledIcon,
} from "./icons";
import SettingsDialog from "./SettingsDialog.astro";

interface Props {
  links: { title: string; url: string; icon: IconDefinition }[];
}

const icons = {
  Home: [HouseOutlineIcon, HouseFilledIcon],
  Work: [BriefcaseOutlineIcon, BriefcaseFilledIcon],
  Settings: [GearOutlineIcon, GearFilledIcon],
  Blog: [RSSOutlineIcon, RSSFilledIcon],
};

const { links } = Astro.props;
const { pathname } = Astro.url;
---

<nav id="sticky-nav" class={styles.newBar}>
  {
    links.map((link) => {
      const isActive =
        link.url === pathname || link.url === pathname.replace(/\/$/, "");
      const Icon = icons[link.title as keyof typeof icons]?.[isActive ? 1 : 0];
      return (
        <a href={link.url} class={styles.newItem} data-active={isActive}>
          {link.title === "/uses" ? (
            <span
              style={
                isActive
                  ? {
                      textDecoration: "underline",
                      textDecorationThickness: "0.3ex",
                      textUnderlineOffset: "0.3ex",
                      textDecorationSkipInk: "all",
                    }
                  : {}
              }
            >
              /uses
            </span>
          ) : (
            <Icon size="1.25rem" />
          )}
        </a>
      );
    })
  }
  <button id="settings-dialog-trigger" class={styles.newItem}
    ><GearFilledIcon size="1.25rem" /></button
  >
</nav>
<!-- <Box position="fixed" top="$4" right="$5" display={{ sm: "none" }} zIndex="10"> -->
<!--   <ThemeToggle /> -->
<!-- </Box> -->
<SettingsDialog />

<script>
  function setup() {
    const bar = document.querySelector("#sticky-nav") as
      | HTMLElement
      | undefined;

    if (!bar) {
      return;
    }

    let lastScrollTop = document.documentElement.scrollTop;
    let scrollDistance = 0;
    let lastScrollDirection: "down" | "up";

    const onScroll = () => {
      let st = document.documentElement.scrollTop; // Credits: "https://github.com/qeremy/so/blob/master/so.dom.js#L426"
      if (st > lastScrollTop) {
        // downscroll code
        if (lastScrollDirection === "up") {
          scrollDistance = st - lastScrollTop;
        } else {
          scrollDistance += st - lastScrollTop;
        }
        lastScrollDirection = "down";

        if (scrollDistance > 50) {
          bar.style.setProperty("opacity", "0.5");
        }
      } else if (st < lastScrollTop) {
        // upscroll code
        if (lastScrollDirection === "down") {
          scrollDistance = lastScrollTop - st;
        } else {
          scrollDistance += lastScrollTop - st;
        }

        lastScrollDirection = "up";

        if (scrollDistance > 50) {
          bar.style.removeProperty("opacity");
        }
      } // else was horizontal scroll
      lastScrollTop = st <= 0 ? 0 : st; // For Mobile or negative scrolling
    };

    window.addEventListener("scroll", onScroll, false);
    const settingsTrigger = document.querySelector("#settings-dialog-trigger");
    settingsTrigger?.addEventListener("click", () => {
      (
        document.querySelector("#settings-dialog") as HTMLDialogElement
      ).showModal();
    });
    bar.addEventListener("click", () => {
      bar.style.removeProperty("opacity");
    });
    bar.addEventListener("touchstart", () => {
      bar.style.removeProperty("opacity");
    });
  }

  document.addEventListener("astro:after-swap", setup);
  setup();
</script>
